import os
import re
import logging
import time
import hashlib
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from queue import Queue, Empty

from docx2pdf import convert
from pathlib import Path
import logging

class DocumentConverter:
    """
    Classe pour convertir des fichiers .doc et .docx en PDF.
    
    Cette classe g√®re la conversion de documents Word en fichiers PDF, 
    en traitant les conversions par lots et en enregistrant les r√©sultats 
    dans un r√©pertoire sp√©cifi√©. Elle utilise le multithreading pour acc√©l√©rer 
    le processus et int√®gre un syst√®me de logging pour suivre l'activit√© et 
    les erreurs.
    
    Attributes:
        input_dir (Path): R√©pertoire contenant les fichiers Word √† convertir.
        output_dir (Path): R√©pertoire o√π les fichiers PDF convertis seront enregistr√©s.
        logger (logging.Logger): Logger pour enregistrer les informations et les erreurs.
        max_workers (int): Nombre maximal de threads pour le traitement concurrent.
    """

    def __init__(self, config, logger=None):
        """
        Initialise le DocumentConverter avec les r√©pertoires d'entr√©e et de sortie 
        ainsi que d'autres configurations n√©cessaires.
        
        Args:
            config (dict): Dictionnaire contenant les param√®tres de configuration charg√©s 
                           depuis config.yaml.
            logger (logging.Logger, optional): Logger pour enregistrer les logs. Defaults √† None.
        """
        # Configure paths
        self.input_dir = Path(config['input_dir'])
        self.output_dir = Path(config['output_dir'])
        self.output_dir.mkdir(parents=True, exist_ok=True)

        # Setup logger
        self.logger = logger or logging.getLogger(__name__)

        # Conversion settings
        self.max_workers = config.get('max_workers', 10)

    def convert_documents(self):
        """
        Convertit tous les fichiers .doc et .docx dans le r√©pertoire d'entr√©e en PDF 
        et les enregistre dans le r√©pertoire de sortie.
        """
        try:
            # Recherche des fichiers .doc et .docx
            doc_files = list(self.input_dir.glob('*.doc')) + list(self.input_dir.glob('*.docx'))
            total_files = len(doc_files)
            self.logger.info(f"üì¢ D√©but de la conversion de {total_files} fichiers.")

            if total_files == 0:
                self.logger.warning(f"Aucun fichier DOC ou DOCX trouv√© dans le dossier : {self.input_dir}")
                return

            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                # Lancer toutes les t√¢ches de conversion
                future_to_doc = {executor.submit(self.convert_single_document, doc_file): doc_file for doc_file in doc_files}

                for future in as_completed(future_to_doc):
                    doc_file = future_to_doc[future]
                    try:
                        success = future.result()
                        if success:
                            self.logger.info(f"‚úÖ Conversion r√©ussie: {doc_file.name}")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Conversion √©chou√©e: {doc_file.name}")
                    except Exception as e:
                        self.logger.error(f"‚ùå Exception lors de la conversion de {doc_file.name}: {str(e)}")

            self.logger.info("üéâ Toutes les conversions sont termin√©es.")

        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la recherche des fichiers: {str(e)}")

    def convert_single_document(self, doc_path):
        """
        Convertit un fichier .doc ou .docx en PDF.
        
        Args:
            doc_path (Path): Chemin vers le fichier Word √† convertir.
        
        Returns:
            bool: True si la conversion a r√©ussi, False sinon.
        """
        try:
            # D√©finir le chemin complet pour le fichier PDF de sortie
            output_pdf = self.output_dir / f"{doc_path.stem}.pdf"
            convert(str(doc_path), str(output_pdf))
            return True
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de la conversion de {doc_path.name}: {str(e)}")
            return False
